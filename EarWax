local VERSION = "0.0.1"

--[[
	EarWax Source code
		- by ZuxTheTank
--]]

local library = {}
library.__index = library

local player = game:GetService("Players").LocalPlayer 

local deafultOptions = {
	name = "EarWax",
	position = UDim2.new(0.81809783, 0, 0.91538465, 0),
	size = UDim2.new(0.163065553, 0, 0.0634615421, 0),
	font = "Fantasy",
	command_hint = true,
	hint_color = Color3.new(255, 255, 255),
	padding = 0.55,
}

function library:Log(text, color)
	--[[
		Window:Log(table[string] text, Color3 color) -> nil
			* Used for writing text into the gui 
			* Function used for type hinting commands
	--]]
	for i = 1, math.floor(#text/2) do local j = #text - i + 1 text[i], text[j] = text[j], text[i] end
	
	local position = self.CommandLine.Position + UDim2.new(-0.023, 0, -self.Padding, 0)
	
	for _,v in ipairs(text) do 
		local textLabel = Instance.new("TextLabel")
		textLabel.Name = "Log"
		textLabel.Text = v
		textLabel.Position = position
		textLabel.Size = UDim2.new(1, 0, 0.1, 0)
		textLabel.TextColor3 = color
		textLabel.TextSize = 15.000
		textLabel.Font = self.Font or deafultOptions.Font
		textLabel.TextXAlignment = Enum.TextXAlignment.Left
		textLabel.BackgroundTransparency = 1
		textLabel.Parent = self.Main
		
		position = position + UDim2.new(0, 0, -self.Padding, 0)
	end
end

function library:ClearLog()
	--[[
		Window:ClearLog() -> nil 
			* Used for clearing the logs
			* Logs will auto clear whenever user types
	--]]
	for _,v in ipairs(self.Main:GetChildren()) do 
		if v.Name == "Log" then 
			v:Destroy()
		end
	end
end

function library:NewCommand(name)
	--[[
		Window:NewCommand(string name) ->
			table
			[
				Command:Add(string name, function callback) -> nil
					* Used for making a command
				Command:Delete(string name) -> nil
					* Used for deleting a command
			]
			* Used to create a new command
	--]]
	self.Commands[name] = {}
	
	local metatable = {name = name, _self = self}
	metatable.__index = metatable
	
	function metatable:Add(name, callback)
		self._self.Commands[self.name][name] = callback
	end
	function metatable:Delete(name)
		self._self.Commands[self.name][name] = nil
	end
	
	local command = setmetatable({}, metatable)
	
	return command
end

function library.New(options)
	--[[
		Earwax.New(table[strng index = value] options) -> Window
			* Used to create a new Window 
	--]]
	if options == nil  then
		options = deafultOptions
	end

	local earwax = setmetatable({}, library)

	local GUI = Instance.new("ScreenGui")
	local Main = Instance.new("Frame")
	local commandLine = Instance.new("TextBox")

	GUI.Name = "EarWax"
	GUI.Parent = game.CoreGui
	GUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

	if getgenv().EARWAX_GUI then 
		getgenv().EARWAX_GUI:Destroy()
	end
	getgenv().EARWAX_GUI = GUI 

	Main.Name = "Main"
	Main.Parent = GUI
	Main.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
	Main.Position = options.position or deafultOptions.position
	Main.Size = options.size or deafultOptions.size

	commandLine.Name = "commandLine"
	commandLine.Parent = Main
	commandLine.BackgroundColor3 = Color3.fromRGB(44, 44, 44)
	commandLine.Position = UDim2.new(0.023, 0, 0.160606056, 0)
	commandLine.Size = UDim2.new(0.950000048, 0, 0.669696987, 0)
	commandLine.Font = Enum.Font[options.font or deafultOptions.font]
	commandLine.PlaceholderText = options.name or deafultOptions.name
	commandLine.Text = ""
	commandLine.TextColor3 = Color3.fromRGB(255, 255, 255)
	commandLine.TextSize = 15.000
	commandLine.TextWrapped = true
	commandLine.TextXAlignment = Enum.TextXAlignment.Left
	commandLine.TextYAlignment = Enum.TextYAlignment.Top

	earwax.GUI = GUI
	earwax.Main = Main 
	earwax.CommandLine = commandLine
	earwax.Padding = options.padding or deafultOptions.padding
	earwax.Font = options.font or deafultOptions.font
	earwax.CommandHint = options.command_hint or deafultOptions.command_hint
	earwax.HintColor = options.hint_color or deafultOptions.hint_color
	earwax.Commands = {}
	
	if earwax.CommandHint then
		commandLine:GetPropertyChangedSignal("Text"):Connect(function()
			local text = commandLine.Text:lower()
			
			if text == "" or text == " " or text == nil then 
				earwax:ClearLog()
				return
			end
			
			local board = {}
			
			for i,v in pairs(earwax.Commands) do 
				for j, _ in pairs(v) do 
					if string.match(i:lower().." "..j:lower(), text) then
						table.insert(board, i.." "..j)
						earwax:ClearLog()
					end
				end
			end
			
			earwax:Log(board, earwax.HintColor)
		end)
	end
	
	commandLine.FocusLost:Connect(function(enterPressed)
		if enterPressed then 
			earwax:ClearLog()
			local text = commandLine.Text:lower():split(" ")
			
			if text[1] == "commands" then 
				local board = {}
				for i,v in pairs(earwax.Commands) do 
					for j,_ in pairs(v) do 
						table.insert(board, i.." "..j)
					end
				end
				earwax:Log(board, earwax.HintColor)
			end
			
			for i, v in pairs(earwax.Commands) do 
				if text[1]:lower() == i:lower() then 
					for i, v in pairs(v) do 
						if text[2] == i:lower() then 
							v(text[3])
						end
					end
				end
			end
		end
	end)

	return earwax
end 

return library
